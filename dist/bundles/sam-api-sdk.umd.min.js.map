{"version":3,"sources":["../../encoder.ts","../../variables.ts","../../configuration.ts","../../api/account.service.ts","../../api/api.ts","../../api.module.ts"],"names":["CustomHttpParameterCodec","prototype","encodeKey","k","encodeURIComponent","encodeValue","v","decodeKey","decodeURIComponent","decodeValue","BASE_PATH","InjectionToken","Configuration","configurationParameters","this","apiKeys","username","password","accessToken","basePath","withCredentials","encoder","credentials","selectHeaderContentType","contentTypes","_this","length","type","find","x","isJsonMime","undefined","selectHeaderAccept","accepts","mime","jsonMime","RegExp","test","toLowerCase","lookupCredential","key","value","AccountApiService","httpClient","configuration","defaultHeaders","HttpHeaders","addToHttpParams","httpParams","Date","addToHttpParamsRecursive","Array","isArray","forEach","elem","Error","append","toISOString","substr","Object","keys","indexUsingGET","observe","reportProgress","options","headers","httpHeaderAcceptSelected","httpHeaderAccept","set","responseType","startsWith","get","Injectable","args","providedIn","HttpClient","Optional","Inject","decorators","APIS","ApiModule","parentModule","http","forRoot","configurationFactory","ngModule","providers","provide","useFactory","NgModule","imports","declarations","exports","SkipSelf","csv","tsv","ssv","pipes"],"mappings":"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","sourcesContent":["import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport interface ConfigurationParameters {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class Configuration {\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    /**\n     *  @deprecated Since 5.0. Use credentials instead\n     */\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n","/**\n * Api Documentation\n * Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { AccountResponse } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountApiService {\n\n    protected basePath = 'http://localhost:80';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * index\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public indexUsingGET(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<AccountResponse>;\n    public indexUsingGET(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpResponse<AccountResponse>>;\n    public indexUsingGET(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: '*/*'}): Observable<HttpEvent<AccountResponse>>;\n    public indexUsingGET(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: '*/*'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                '*/*'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<AccountResponse>(`${this.configuration.basePath}/account`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './account.service';\nimport { AccountApiService } from './account.service';\nexport const APIS = [AccountApiService];\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { AccountApiService } from './api/account.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: []\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n"]}